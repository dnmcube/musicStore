using System.Net;
using System.Security.Claims;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using System.Text.Json;
using Autofac;
using Microsoft.IdentityModel.JsonWebTokens;

namespace Controller.Config;
public class Middleware
{
    private readonly RequestDelegate _next;
    private readonly ILogger<Middleware> _logger;

    private readonly ILifetimeScope _lifetimeScope;

    public Middleware(RequestDelegate next, ILogger<Middleware> logger, ILifetimeScope lifetimeScope)
    {
        _next = next;
        _logger = logger;
        _lifetimeScope = lifetimeScope;
    }

    public async Task Invoke(HttpContext context)
    {
        try
        {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
            var authHeader = context.Request.Headers["Authorization"].FirstOrDefault();
            if (authHeader == null || !authHeader.StartsWith("Bearer "))
            {
                await _next(context);
                return;
            }

            var token = authHeader.Substring("Bearer ".Length).Trim();

            // –ü–∞—Ä—Å–∏–º —Ç–æ–∫–µ–Ω –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º jti (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–∫–µ–Ω–∞)
            var tokenHandler = new JsonWebTokenHandler();
            var jwtToken = tokenHandler.ReadJsonWebToken(token);
            var jti = jwtToken.Claims.FirstOrDefault(c => c.Type == JwtRegisteredClaimNames.Jti)?.Value;
            var roleClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;
            if (string.IsNullOrEmpty(jti))
            {
                _logger.LogWarning("–¢–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç jti.");
                await _next(context);
                return;
            }

            using (var scope = _lifetimeScope.BeginLifetimeScope())
            {
                var apiKeyClaim = context.User.FindAll("apiKey").Select(x => x.Value).ToArray();
                var allowedApisClaim = context.User.FindAll("allowedApis").Select(x => x.Value).ToList();
                if (apiKeyClaim.Any() && allowedApisClaim.Any())
                {
                    if (!Guid.TryParse(jti, out Guid userId))
                    {
                        throw new ArgumentException($"–û—à–∏–±–∫–∞ Jti –Ω–µ GUID {jti}");
                    }

                    var requestedApi = context.Request.Path.Value?.TrimStart('/'); // üëà –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π API
                    
                }
                else
                {
                    throw new ArgumentException($"–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç");
                }
            }

            // –ü–µ—Ä–µ–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å –¥–∞–ª—å—à–µ –ø–æ –ø–∞–π–ø–ª–∞–π–Ω—É
            await _next(context);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞");
            await HandleExceptionAsync(context, ex);
        }
    }

    private static Task HandleExceptionAsync(HttpContext context, Exception ex)
    {
        object response;
        context.Response.ContentType = "application/json";
        
        if (ex is KeyNotFoundException)
        {
            context.Response.StatusCode = (int)HttpStatusCode.OK;

             response = new
            {
                error = ex.Message,
                details = "",
                tracer = "",
                innerexeption = ""
            };
            return context.Response.WriteAsync(JsonSerializer.Serialize(response));
        }
        
        var formattedTrace = string.Join(" ::: ", ex.StackTrace
            .Split('\n')
            .Where(line => line.Contains(":line")) // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç—Ä–æ–∫
            .Select(line => line.Trim()));
      //  formattedTrace = formattedTrace.Replace(" ::: ", Environment.NewLine);
         response = new
        {
            error = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            details = ex.Message,
            tracer = formattedTrace,
            innerexeption = ex.InnerException != null ? ex.InnerException.ToString() : ""
        };
        context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;

      

        return context.Response.WriteAsync(JsonSerializer.Serialize(response));
    }
}