// <auto-generated />
using System;
using Infrastructure.Frameworks.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Frameworks.Models.BaseModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.ToTable("BaseModel");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseModel");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Infrastructure.Frameworks.Models.Basket", b =>
                {
                    b.HasBaseType("Infrastructure.Frameworks.Models.BaseModel");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uuid");

                    b.HasIndex("GuestId");

                    b.HasIndex("ProductsId");

                    b.HasDiscriminator().HasValue("Basket");
                });

            modelBuilder.Entity("Infrastructure.Frameworks.Models.BoughtUserProduct", b =>
                {
                    b.HasBaseType("Infrastructure.Frameworks.Models.BaseModel");

                    b.Property<int>("ProductCount")
                        .HasColumnType("integer");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("BoughtUserProduct");
                });

            modelBuilder.Entity("Infrastructure.Frameworks.Models.Guest", b =>
                {
                    b.HasBaseType("Infrastructure.Frameworks.Models.BaseModel");

                    b.HasDiscriminator().HasValue("Guest");
                });

            modelBuilder.Entity("Infrastructure.Frameworks.Models.Products", b =>
                {
                    b.HasBaseType("Infrastructure.Frameworks.Models.BaseModel");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("IsSclad")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Products");
                });

            modelBuilder.Entity("Infrastructure.Frameworks.Models.Role", b =>
                {
                    b.HasBaseType("Infrastructure.Frameworks.Models.BaseModel");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("BaseModel", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("Role_Name");
                        });

                    b.HasDiscriminator().HasValue("Role");
                });

            modelBuilder.Entity("Infrastructure.Frameworks.Models.User", b =>
                {
                    b.HasBaseType("Infrastructure.Frameworks.Models.BaseModel");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<string>("SecondName")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Infrastructure.Frameworks.Models.UserRole", b =>
                {
                    b.HasBaseType("Infrastructure.Frameworks.Models.BaseModel");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("BaseModel", t =>
                        {
                            t.Property("UserId")
                                .HasColumnName("UserRole_UserId");
                        });

                    b.HasDiscriminator().HasValue("UserRole");
                });

            modelBuilder.Entity("Infrastructure.Frameworks.Models.Basket", b =>
                {
                    b.HasOne("Infrastructure.Frameworks.Models.Guest", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Frameworks.Models.Products", "Products")
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Infrastructure.Frameworks.Models.BoughtUserProduct", b =>
                {
                    b.HasOne("Infrastructure.Frameworks.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Frameworks.Models.UserRole", b =>
                {
                    b.HasOne("Infrastructure.Frameworks.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Frameworks.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
